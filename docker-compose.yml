x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  environment: &airflow-common-env
    # Configuración de Airflow + Celery
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

    # Conexión MySQL para tu DAG (opcional)
    AIRFLOW_CONN_MYSQL_DEFAULT: "mysql://model_user:model_password@mysql:3306/model_db"

    # Variables para MinIO / MLflow
    AWS_ACCESS_KEY_ID: admin
    AWS_SECRET_ACCESS_KEY: supersecret
    MLFLOW_S3_ENDPOINT_URL: http://minio:9000

  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - models_volume:/opt/airflow/models
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  ################################################################
  # PostgreSQL - BD para Airflow
  ################################################################
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - mlops_net

  ################################################################
  # Redis - broker Celery
  ################################################################
  redis:
    image: redis:latest
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - mlops_net

  ################################################################
  # Airflow (webserver, scheduler, worker, triggerer)
  ################################################################
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"  # Acceso: http://TU_VM:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops_net

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create --username airflow --password airflow --firstname Airflow --lastname Admin --role Admin --email admin@example.com
        echo "Airflow init finalizado."
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    user: "0:0"
    volumes:
      - ./:/sources
    networks:
      - mlops_net

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - mlops_net

  ################################################################
  # MySQL (para MLflow y tu model_db)
  ################################################################
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: supersecret
      MYSQL_DATABASE: model_db
      MYSQL_USER: model_user
      MYSQL_PASSWORD: model_password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-init:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    command: --local-infile=1
    restart: unless-stopped
    networks:
      - mlops_net

  ################################################################
  # MinIO
  ################################################################
  minio:
    container_name: Minio
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=supersecret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio:/data
    restart: unless-stopped
    networks:
      - mlops_net

  minio-client:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 admin supersecret;
      mc mb myminio/mlflows3 || echo 'Bucket mlflows3 already exists'"
    networks:
      - mlops_net

  ################################################################
  # FastAPI - Inferencia
  ################################################################
  fastapi:
    build: ./fastapi
    container_name: fastapi_service
    ports:
      - "8081:8000"
    volumes:
      - models_volume:/opt/airflow/models
    depends_on:
      - mysql
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=supersecret
    networks:
      - mlops_net

  ################################################################
  # random-data-api
  ################################################################
  random-data-api:
    build: ./random-data-api
    container_name: random-data-api
    ports:
      - "8001:80"
    volumes:
      - ./Data:/data
#    networks:
#      - mlops_net

  ################################################################
  # MLflow Tracking Server
  ################################################################
  mlflow:
    build: ./mlflow
    container_name: mlflow
    restart: always
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=supersecret
    command: >
      mlflow server
      --backend-store-uri mysql+pymysql://root:supersecret@mysql/mlflow_db
      --default-artifact-root s3://mlflows3/artifacts
      --host 0.0.0.0
      --serve-artifacts
    depends_on:
      - mysql
      - minio
    networks:
      - mlops_net

volumes:
  postgres-db-volume:
  models_volume:
  mysql_data:

networks:
  mlops_net:
    driver: bridge
